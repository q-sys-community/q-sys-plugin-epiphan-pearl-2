-- The PluginInfo header contains some important information that Q-Sys Designer will parse when compiled.
-- Id is a unique ID given to every plugin. While we typically use randomly generated UUID's, you can use anything here so long as it is unique

PluginInfo = {
	Name = "Epiphan~Pearl-2 (0.0.0.0-master)", -- The tilde here indicates folder structure in the Shematic Elements pane
	Version = "0.0.0.0-master",
	Id = "qsysc.epiphan.pearl2.0.0.0.0-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
	Description = "Plugin for control of a Epiphan Pearl-2",
	ShowDebug = true
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
	White = {255, 255, 255},
	Black = {0, 0, 0},
	Red = {255, 0, 0},
	Green = {0, 255, 0}
}

local MaxChannels = 10
local MaxLayouts = 10
-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
	props = {
		{
			Name = "IP Host",
			Type = "string",
			Value = "127.0.0.1"
		},
		{
			Name = "Username",
			Type = "string",
			Value = "admin"
		},
		{
			Name = "Password",
			Type = "string",
			Value = ""
		},
		{
			Name = "Channel Count",
			Type = "integer",
			Min = 2, -- Set to 2 to prevent complex code to handle non-arrays
			Max = MaxChannels,
			Value = 2
		},
		{
			Name = "Layout Count",
			Type = "integer",
			Min = 1,
			Max = 10,
			Value = 5
		},
		{
			Name = "Editable RTMP Names",
			Type = "boolean",
			Value = false
		}
	}
	return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
	return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
	ctls = {
		-- System Pins
		{
			Name = "Online",
			ControlType = "Indicator",
			IndicatorType = "Led",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "ConnectionState",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Both",
			--Count = 1,
			--UserPin = true
		},
		{
			Name = "FirmwareVersion",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Output",
			--Count = 1,
			--UserPin = true
		},
		-- Channel Control Pins
		{
			Name = "ChannelName",
			ControlType = "Indicator",
			IndicatorType = "Text",
			Count = props["Channel Count"].Value
		},
		{
			Name = "ChannelRecordStart",
			ControlType = "Button",
			ButtonType = "Momentary",
			Count = props["Channel Count"].Value,
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "ChannelRecordStop",
			ControlType = "Button",
			ButtonType = "Momentary",
			Count = props["Channel Count"].Value,
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "ChannelRecordActive",
			ControlType = "Indicator",
			IndicatorType = "Led",
			Count = props["Channel Count"].Value,
			UserPin = true,
			PinStyle = "Output"
		},
		{
			Name = "ChannelStreamStart",
			ControlType = "Button",
			ButtonType = "Momentary",
			Count = props["Channel Count"].Value,
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "ChannelStreamStop",
			ControlType = "Button",
			ButtonType = "Momentary",
			Count = props["Channel Count"].Value,
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "ChannelStreamActive",
			ControlType = "Indicator",
			IndicatorType = "Led",
			Count = props["Channel Count"].Value,
			UserPin = true,
			PinStyle = "Output"
		},
		{
			Name = "ChannelStreamName",
			ControlType = "Text",
			Count = props["Channel Count"].Value,
			UserPin = true,
			PinStyle = "Both"
		}
	}

	-- Many layouts on many channels
	for b = 1, MaxLayouts do
		table.insert(
			ctls,
			{
				Name = string.format("ChannelLayoutSelect%02d", b),
				ControlType = "Button",
				ButtonType = "Momentary",
				Count = props["Channel Count"].Value,
				UserPin = true,
				PinStyle = "Input"
			}
		)
		table.insert(
			ctls,
			{
				Name = string.format("ChannelLayoutActive%02d", b),
				ControlType = "Indicator",
				IndicatorType = "Led",
				Count = props["Channel Count"].Value,
				UserPin = true,
				PinStyle = "Output"
			}
		)
	end

	return ctls
end

function GetPages(props) -- This function allows you to populate pages in your plugin.
	pages = {}
	for i = 1, props["Channel Count"].Value do
		table.insert(pages, {name = "Channel " .. i})
	end
	return pages
end

function GetControlLayout(props)
	local ActiveRemote = props["page_index"].Value
	local layout = {}
	local graphics = {}

	local x, y = 0, 0

	-- Status
	layout["Online"] = {
		PrettyName = "Online",
		Style = "Indicator",
		Color = {0, 255, 0},
		OffColor = {200, 0, 0},
		UnlinkOffColor = true,
		Position = {x + 3, y + 20},
		Size = {25, 25}
	}
	layout["ConnectionState"] = {
		--PrettyName = "Connection State",
		Style = "Text",
		StrokeWidth = 0,
		Position = {x + 54, y + 12},
		Size = {200, 25}
	}
	layout["FirmwareVersion"] = {
		--PrettyName = "FirmwareVersion",
		Style = "Text",
		StrokeWidth = 0,
		Position = {x + 275, y + 12},
		Size = {125, 25}
	}
	table.insert(
		graphics,
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "Status",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.Black,
			StrokeWidth = 1,
			Position = {x + 0, y + 0},
			Size = {415, 48} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
		}
	)

	local ctl_str = tostring(props["Channel Count"].Value == 1 and "" or " " .. ActiveRemote)

	y = 55
	-- Channel Name
	layout["ChannelName" .. ctl_str] = {
		PrettyName = "Channel" .. ctl_str .. "~Name",
		Style = "Text",
		Color = {200, 200, 200},
		StrokeWidth = 0,
		Position = {x + 80, y + 0},
		Size = {150, 25}
	}
	-- Add Label
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = string.format("Chan Name"),
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x, y},
			Size = {75, 25}
		}
	)

	-- Streaming Section
	y = 90
	-- Stream Start
	layout["ChannelStreamStart" .. ctl_str] = {
		PrettyName = "Channel" .. ctl_str .. "~Stream~Start",
		Style = "Button",
		Legend = "Start",
		ButtonStyle = "Momentary",
		Position = {x + 110, y + 0},
		Size = {40, 25}
	}

	-- Stream Start
	layout["ChannelStreamStop" .. ctl_str] = {
		PrettyName = "Channel" .. ctl_str .. "~Stream~Stop",
		Style = "Button",
		Legend = "Stop",
		ButtonStyle = "Momentary",
		Position = {x + 155, y + 0},
		Size = {40, 25}
	}

	-- Stream Active
	layout["ChannelStreamActive" .. ctl_str] = {
		PrettyName = "Channel" .. ctl_str .. "~Stream~Active",
		Style = "Indicator",
		Color = {255, 0, 0},
		OffColor = {100, 0, 0},
		UnlinkOffColor = true,
		Position = {x + 80, y + 0},
		Size = {25, 25}
	}
	if props["Editable RTMP Names"].Value then
		-- RTMP Stream Name
		table.insert(
			graphics,
			{
				Type = "Text",
				Text = string.format("RTMP Stream Name"),
				Font = "Roboto",
				FontSize = 12,
				FontStyle = "Bold",
				HTextAlign = "Right",
				Color = Colors.Black,
				Position = {x + 192, y + 0},
				Size = {128, 25}
			}
		)
		layout["ChannelStreamName" .. ctl_str] = {
			PrettyName = "Channel" .. ctl_str .. "~Stream~RTMP Stream Name",
			Style = "Text",
			Position = {x + 324, y + 0},
			Size = {80, 25}
		}
	end
	-- Add Label
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = string.format("Stream"),
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x, y},
			Size = {75, 25}
		}
	)

	-- Recording Section
	y = 130
	-- Record Start
	layout["ChannelRecordStart" .. ctl_str] = {
		PrettyName = "Channel" .. ctl_str .. "~Record~Start",
		Style = "Button",
		Legend = "Start",
		ButtonStyle = "Momentary",
		Position = {x + 110, y + 0},
		Size = {40, 25}
	}

	-- Record Start
	layout["ChannelRecordStop" .. ctl_str] = {
		PrettyName = "Channel" .. ctl_str .. "~Record~Stop",
		Style = "Button",
		Legend = "Stop",
		ButtonStyle = "Momentary",
		Position = {x + 155, y + 0},
		Size = {40, 25}
	}

	-- Record Active
	layout["ChannelRecordActive" .. ctl_str] = {
		PrettyName = "Channel" .. ctl_str .. "~Record~Active",
		Style = "Indicator",
		Color = {255, 0, 0},
		OffColor = {100, 0, 0},
		UnlinkOffColor = true,
		Position = {x + 80, y + 0},
		Size = {25, 25}
	}
	-- Add Label
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = string.format("Record"),
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x, y},
			Size = {75, 25}
		}
	)

	-- Layout Section
	y = 170
	for b = 1, MaxLayouts do
		layout[string.format("ChannelLayoutSelect%02d", b) .. ctl_str] = {
			PrettyName = "Channel" .. ctl_str .. string.format("~Layout~Select%02d", b),
			Style = "Button",
			Legend = string.format("%02d", b),
			ButtonStyle = "Momentary",
			Position = {x + 80 + (b * 30), y + 0},
			Size = {25, 25}
		}
		layout[string.format("ChannelLayoutActive%02d", b) .. ctl_str] = {
			PrettyName = "Channel" .. ctl_str .. string.format("~Layout~Active %02d", b),
			Style = "Indicator",
			Color = {0, 255, 0},
			OffColor = {0, 100, 0},
			UnlinkOffColor = true,
			Position = {x + 80 + (b * 30), y + 30},
			Size = {25, 25}
		}
	end
	-- Add Label
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = string.format("Layout"),
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x, y},
			Size = {75, 25}
		}
	)

	return layout, graphics
end

-- Components provide a way to save or retain certain settings without necessarily displaying it in another control such as a combobox.
-- For example, the when someone hits the "Save" button on this plugin, it saves the RGB values in the "rgb_storage" component below.
-- This allows us to do things 'under the hood' which gives the plugin a much sleeker feel.
function GetComponents(props)
	return {}
end

if Controls then
	local OverrideHREFs = {}

	function handleGetParams(tbl, code, data, err, headers)
		if code == 200 then
			-- Reset the Comms Timer
			timerComms:Start(30)
			Controls.Online.Boolean = true
			if #data == 0 then
				getChannelDetails(tbl.Channel)
			else
				for line in data:gmatch("([^\n]*)\n?") do
					--print(line)
					delim = string.find(line, " = ")
					if delim ~= nil then
						key = line:sub(1, delim - 1)
						--print("[" .. key .. "]")
						val = line:sub(delim + 3)
						--print("[" .. val .. "]")
						if key == "firmware_version" then
							Controls["FirmwareVersion"].String = val
						elseif key == "mac_address" then
						elseif key == "rec_enabled" then
							Controls["ChannelRecordActive"][tbl.Channel].Value = (val == "on")
						elseif key == "publish_enabled" then
							Controls["ChannelStreamActive"][tbl.Channel].Value = (val == "on")
						elseif key == "active_layout" then
							for b = 1, MaxLayouts do
								Controls[string.format("ChannelLayoutActive%02d", b)][tbl.Channel].Value = (tonumber(val) == b)
							end
						end
					end
				end
			end
		else
			if code > 0 then
				print("HTTP Response Code: ", code)
			end
		end
	end

	function getChannelDetails(c)
		if c == 0 then
			for i = 1, Properties["Channel Count"].Value do
				getChannelDetails(i)
			end
			return
		end

		url = "http://" .. Properties["IP Host"].Value
		url = url .. "/admin/channel" .. c .. "/get_params.cgi?"
		url = url .. "product_name&firmware_version&mac_address&rec_enabled&publish_enabled&active_layout"

		HttpClient.Download {
			Channel = c,
			Url = url,
			Headers = {},
			User = Properties.Username.Value,
			Password = Properties.Password.Value,
			Timeout = 10,
			EventHandler = handleGetParams
		}
	end

	function setStream(c, active)
		url = "http://" .. Properties["IP Host"].Value
		url = url .. "/admin/channel" .. c .. "/set_params.cgi?"
		url = url .. "publish_enabled="
		if active == true then
			url = url .. "on"
		end

		HttpClient.Download {
			Channel = c,
			Url = url,
			Headers = {},
			User = Properties.Username.Value,
			Password = Properties.Password.Value,
			Timeout = 10,
			EventHandler = handleGetParams
		}
	end

	function setStreamName(c, newName)
		url = "http://" .. Properties["IP Host"].Value
		url = url .. "/admin/channel" .. c .. "/set_params.cgi?"
		url = url .. "rtmp_stream="
		url = url .. newName

		HttpClient.Download {
			Channel = c,
			Url = url,
			Headers = {},
			User = Properties.Username.Value,
			Password = Properties.Password.Value,
			Timeout = 10,
			EventHandler = handleGetParams
		}
	end

	function setRecord(c, active)
		url = "http://" .. Properties["IP Host"].Value
		url = url .. "/admin/channel" .. c .. "/set_params.cgi?"
		url = url .. "rec_enabled="
		if active == true then
			url = url .. "on"
		end

		HttpClient.Download {
			Channel = c,
			Url = url,
			Headers = {},
			User = Properties.Username.Value,
			Password = Properties.Password.Value,
			Timeout = 10,
			EventHandler = handleGetParams
		}
	end

	function setLayout(c, layout)
		url = "http://" .. Properties["IP Host"].Value
		url = url .. "/admin/channel" .. c .. "/set_params.cgi?"
		url = url .. "active_layout=" .. layout

		HttpClient.Download {
			Channel = c,
			Url = url,
			Headers = {},
			User = Properties.Username.Value,
			Password = Properties.Password.Value,
			Timeout = 10,
			EventHandler = handleGetParams
		}
	end

	-- Loop through all Controls and setup Event Handlers
	for k, v in pairs(Controls) do
		-- For each Channel that is declared
		for c = 1, Properties["Channel Count"].Value do
			-- Handle Button:: Channel Stream Start
			if k == "ChannelStreamStart" then
				-- Handle Button:: Channel Stream Stop
				-- Handle Button:: Channel Stream Start
				if Properties["Channel Count"].Value > 1 then
					-- Get Output Number
					v[c].EventHandler = function(changedControl)
						if changedControl.Boolean == true then
							setStream(c, true)
						end
					end
				else
					v.EventHandler = function(changedControl)
						if changedControl.Boolean == true then
							setStream(c, true)
						end
					end
				end
			elseif k == "ChannelStreamStop" then
				-- Handle Button:: Channel Record Start
				-- Handle Button:: Channel Stream Start
				if Properties["Channel Count"].Value > 1 then
					-- Get Output Number
					v[c].EventHandler = function(changedControl)
						if changedControl.Boolean == true then
							setStream(c, false)
						end
					end
				else
					v.EventHandler = function(changedControl)
						if changedControl.Boolean == true then
							setStream(c, false)
						end
					end
				end
			elseif k == "ChannelStreamName" then
				if Properties["Channel Count"].Value > 1 then
					v[c].EventHandler = function(changedControl)
						setStreamName(c, changedControl.String)
					end
				else
					v.EventHandler = function(changedControl)
						setStreamName(c, changedControl.String)
					end
				end
			elseif k == "ChannelRecordStart" then
				-- Handle Button:: Channel Record Stop
				if Properties["Channel Count"].Value > 1 then
					-- Get Output Number
					v[c].EventHandler = function(changedControl)
						if changedControl.Boolean == true then
							setRecord(c, true)
						end
					end
				else
					v.EventHandler = function(changedControl)
						if changedControl.Boolean == true then
							setRecord(c, true)
						end
					end
				end
			elseif k == "ChannelRecordStop" then
				if Properties["Channel Count"].Value > 1 then
					-- Get Output Number
					v[c].EventHandler = function(changedControl)
						if changedControl.Boolean == true then
							setRecord(c, false)
						end
					end
				else
					v.EventHandler = function(changedControl)
						if changedControl.Boolean == true then
							setRecord(c, false)
						end
					end
				end
			else
				for b = 1, MaxLayouts do
					if k == string.format("ChannelLayoutSelect%02d", b) then
						if Properties["Channel Count"].Value > 1 then
							-- Get Output Number
							v[c].EventHandler = function(changedControl)
								if changedControl.Boolean == true then
									setLayout(c, b)
								end
							end
						else
							v.EventHandler = function(changedControl)
								if changedControl.Boolean == true then
									setLayout(c, b)
								end
							end
						end
					end
				end
			end
		end
	end

	-- Create and setup the Communications Timeout
	timerComms = Timer.New()
	timerComms.EventHandler = function(timer)
		timer:Stop()
		Controls.Online.Boolean = false
	end

	-- Create and setup Polling
	timerPoll = Timer.New()

	timerPoll.EventHandler = function(timer)
		getChannelDetails(0)
	end

	timerPoll:Start(15)
	getChannelDetails(0)
end
